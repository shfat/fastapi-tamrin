from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()


# 1
class StudentNumber(BaseModel):
    student: str


# 2
class Name(BaseModel):
    name: str


# 3
class Birthdate(BaseModel):
    date: str


# 4
class Serial(BaseModel):
    serial: str


# 5
class Birth_province(BaseModel):
    province: str


# 6
class Birth_place(BaseModel):
    place: str


# 7
class Address(BaseModel):
    address: str


# 8
class Postal_code(BaseModel):
    postal: str


# 9
class Check_mobile(BaseModel):
    mobile: str


# 10
class Check_landline(BaseModel):
    landline: str


# 11
class Check_faculty(BaseModel):
    faculty: str

# 12
class Check_major(BaseModel):
    major: str

# 13
class Marital_status(BaseModel):
    marital: str

# 14
class National_id(BaseModel):
    id: str


@app.post("/validate")
def index(data: dict):
    errors = []

    # 1.بررسی شماره دانشجویی
    student = data.get("student", None)
    if student:
        if len(student) != 11:
            errors.append("شماره دانشجویی باید یازده رقم باشد")
        elif int(student[0:3]) > 402 or int(student[0:3]) < 400:
            errors.append("قسمت سال شماره دانشجویی نادرست است")
        elif int(student[3:9]) != 114150:
            errors.append("قسمت ثابت شماره دانشجویی نادرست است")
        elif int(student[9:11]) == 0:
            errors.append("قسمت اندیس شماره دانشجویی نادرست است")

    # 2.بررسی نام
    name = data.get("name", None)
    if name:
        if len(name) > 10:
            errors.append("نام وارد شده نباید بیشتر از 10 کاراکتر باشد")
        for char in name:
            if not ('آ' <= char <= 'ی'):
                errors.append("نام وارد شده فقط  باید حاوی حروف فارسی باشد و نباید حاوی عدد, علائم خاص یا فاصله باشد")

    # 3.بررسی تاریخ تولد
    date = data.get("date", None)
    if date:
        parts = date.split('.')
        year, month, day = parts
        if len(parts) != 3:
            errors.append("تاریخ باید دارای سه بخش (به ترتیب سال، ماه و روز) باشد")
        elif not (year.isdigit() and month.isdigit() and day.isdigit()):
            errors.append("تاریخ وارد شده باید شامل اعداد باشد")
        else:
            year = int(year)
            month = int(month)
            day = int(day)
            if not (1300 <= year <= 1402):
                errors.append("سال وارد شده در تاریخ تولد باید بین 1300 تا 1402 باشد")
            elif not (1 <= month <= 12):
                errors.append("ماه وارد شده در تاریخ تولد باید بین 1 تا 12 باشد")
            elif (1 <= month <= 6) and not (1 <= day <= 31):
                errors.append("روز وارد شده در تاریخ تولد برای این ماه باید بین 1 تا 31 باشد")
            elif (7 <= month <= 12) and not (1 <= day <= 30):
                errors.append("روز وارد شده در تاریخ تولد برای این ماه باید بین 1 تا 30 باشد")

    # 4.بررسی قالب سریال شناسنامه
    serial = data.get("serial", None)
    if serial:
        parts = serial.split('.')
        if len(parts) != 3:
            errors.append("سریال شناسنامه باید شامل سه بخش باشد")
        else:
            first = parts[0]
            second = parts[1]
            third = parts[2]
            if len(first) != 1 or not ('آ' <= first <= 'ی'):
                errors.append("اولین بخش سریال شناسنامه باید یک حرف الفبای فارسی باشد")
            elif len(second) != 2 or not second.isdigit():
                errors.append("دومین بخش سریال شناسنامه باید شامل ۲ عدد باشد")
            elif len(third) != 6 or not third.isdigit():
                errors.append("سومین بخش سریال شناسنامه باید شامل ۶ عدد باشد")

    # 5.بررسی استان محل تولد
    province = data.get("province", None)
    markaz = ["مرکزی", "لرستان", "تهران", "اردبیل", "آذربایجان شرقی", "اصفهان", "خوزستان", "ایلام",
              "خراسان شمالی", "خراسان جنوبی", "خراسان رضوی", "هرمزگان", "بوشهر", "آذربایجان غربی",
              "گیلان", "سیستان و بلوچستان", "زنجان", "ساری", "سمنان", "کردستان", "فارس", "چهارمحال و بختیاری",
              "قزوین", "قم", "البرز", "کرمان", "کرمانشاه", "گلستان", "همدان", "کهکیلویه و بویراحد", "یزد"]
    if not province in markaz:
        errors.append("استان وارد شده در لیست استان های ایران نیست یا ورودی به صورت اشتباه وارد شده است")

    # 6.بررسی شهرستان محل تولد
    place = data.get("place", None)
    c = ["همدان", "ملایر", "نهاوند", "لالجین", "تویسرکان", "اسد آباد", "کبودرآهنگ", "فرسفج", "سامن", "قزوین", "ابهر",
         "تاکستان"
        , "بوئین زهرا", "ابگرم", "قزوین", "گرگان", "بندرترکمن", "کلاله", "علی آباد کتول", "گنبد کاووس", "رامیان",
         "مینودشت", "گالیکش",
         "آزادشهر", "مرواه تپه", "کردکوی", "شیراز", "جهرم", "سپیدان", "لار", "فسا", "ارسنجان", "مرودشت", "سروستان",
         "اقلید", "داراب", "قیر",
         "سپیدان", "کازرون", "استهبان", "آباده", "فیروزکوه", "نی ریز", "خنج", "گراش", "کوار", "مهر", "سوریان", "اواز",
         "جویم", "اهواز",
         "شوشتر", "آبادان", "ایذه", "دزفول", "مسجد سلیمان", "بندر ماهشهر", "بهبهان", "خرمشهر", "اندیمشک", "رامهرمز",
         "بنر امام خمینی",
         "قیدار", "قلعه تل", "هنیجان", "شادگان", "دهدز", "شوش", "جزیره بونه", "جزیره دارا", "لالی", "هویزه", "امیدیه",
         "بیشه بزان", "بندراروند کنار",
         "پادگان دوکوهه", "تبریز", "جلفا", "مرند", "لیقوان", "لیلان", "کلیبر", "بناب", "مراغه", "سراب", "عجب شیر",
         "اسکو", "شبستر", "کندوان", "سردرود",
         "میانه", "ورزقان", "هشترود", "اهر", "نقده", "بستان آباد", "مشهد", "سبزوار", "نیشابور", "اخلمد", "اسفدن", "کنگ",
         "قوچان", "چناران", "شیروان",
         "شاندیز", "تربت حیدریه", "تربت جام", "قدمگاه", "توس", "رشتخوار", "سرخس", "گناباد", "کاشمر", "بجستان", "خواف",
         "قاین", "کلات نادری", "فریمان",
         "طرقبه", "ریزه", "نشتیفان", "بردستان", "باخرز", "درگز", "بردسکن", "خرگرد", "تایباد", "شهرکرد", "بن", "اردل",
         "لردگان", "بروجن", "کوهرنگ",
         "فارسان", "هفشجان", "سامان", "یزد", "بافق", "اردکان", "میبد", "تفت", "مهریز", "ابرکوه", "رضوانشهر", "خرانق",
         "ندوشن", "اشکذر",
         "سمنان", "دامغان", "میامی", "شاهرود", "سرخه", "گرمسار", "مهدی شهر", "شهمیرزاد", "بسطام", "قلعه نوخرقان",
         "بجنورد",
         "جاجرم", "گرمه", "اسفراین", "فاروج", "اسپاخو", "صفی آباد", "آشخانه", "شوقان", "زنجان", "طارم", "خرم دره",
         "سلطانیه",
         "اب بر", "خدابنده", "ماهنشان", "زرین رود", "زرین آباد", "زاهدان", "چابهار", "خاش", "ایرانشهر", "زابل", "کنارک",
         "زهک",
         "میرجاوه", "سراوان", "نیک شهر", "بمپور", "بزمان", "سرباز", "بوشهر", "برازجان", "عسلویه", "خارک", "بندر سیراف",
         "سعدآباد",
         "گناوه", "سجادیه", "جزیره عباسک", "خورموج", "جزیره چراغی", "دلوار", "جزیره تهمادو", "اهرم", "کرمان", "بم",
         "راین", "رفسنجان",
         "میمند", "سیرجان", "ماهان", "فهرج", "کوهبنان", "کهنوج", "جوپار", "منوجان", "راور", "انار", "بردسیر",
         "شهر بابک", "جیرفت", "یاسوج",
         "چرام", "سی سخت", "باشت", "گچساران", "لیکک", "دیشموک", "دهدشت", "پاتاوه", "تهران", "ورامین", "لواسان",
         "دماوند",
         "فیروزکوه", "اسلامشهر", "سولقان", "دربندسر", "رباط کریم", "رودبار قصران", "کرج", "طالقان", "هشتگرد", "کردان",
         "نظرآباد",
         "شهرستانک", "سرعین", "اردبیل", "مشگین شهر", "خلخال", "نیر", "پارس آباد", "گرمی", "عنبران", "رضی", "نمین",
         "بیله سوار", "اصفهان",
         "کاشان", "گلپایگان", "نائین", "خوانسار", "ابیانه", "شهرضا", "خور و بیابانک", "مبارکه", "سمیرم", "خمینی شهر",
         "خور", "شاهین شهر",
         "آران و بیدگل", "فریدون شهر", "اردستان", "نطنز", "زواره", "بیاضه", "نجف آباد", "میمه", "ورزنه", "زرین شهر",
         "بندرانزلی", "رشت",
         "منجیل", "لاهیجان", "تالش", "رودبار", "لنگرود", "املش", "آستارا", "اسالم", "رودسر", "ماسال", "چابکسر", "فومن",
         "آستانه اشرفیه",
         "ماسوله", "لوندویل", "بره سر", "صومعه سرا", "کیاشهر", "شفت", "لوشان", "سیاهکل", "دیلمان", "داماش",
         "پره سر""نوشهر", "رامسر",
         "تنکابن", "چالوس", "قائمشهر", "مرزن آباد", "نمک آبرود", "محمودآباد", "بابلسر", "کلاردشت", "نور", "ساریسوادکوه",
         "کتالم", "بابل", "آمل",
         "سلمان شهر", "عباس آباد", "بهشهر", "لاریجان", "کتالم", "فریدون کنار", "بلده", "کتالم", "گلوگاه", "الاشت",
         "شیرگاه", "بلده", "سیاه بیشه",
         "ایزدشهر", "پل سفید", "جنت رودبار", "رستمکلا", "ایلام", "چرداول", "دهلران", "سراب کلان", "سیروان", "دره شهر",
         "مهران", "آبدانان", "ایوان",
         "ارومیه", "خوی", "پیرانشهر", "مهاباد", "سلماس", "تکاب", "بوکان", "ماکو", "میاندوآب", "سیه چشمه", "سردشت",
         "بیرجند", "فردوس", "طبس", "نهبندان",
         "درمیان", "اسدیه", "سربیشه", "بشرویه", "سرایان", "خوسف", "چنسف", "خضری", "دشت بیاض", "اراک", "محلات", "ساوه",
         "دلیجان", "تفرش", "خمین", "شازند",
         "نراق", "گورچان", "بانه", "دیواندره", "مریوان", "کامیاران", "سقز", "اوراما", "سنندج", "قروه", "بیجار", "کیش",
         "قشم", "میناب", "جزیره هرمز",
         "بندرعباس", "بندر لنگه", "جزیره هنگام", "جزیره ابوموسی", "جزیره شیدور", "بستک", "بندر دیلم", "بندر کنگ",
         "حاجی آباد", "کرمانشاه", "بیستون",
         "پاوه", "سرپل ذهاب", "کنگاور", "جوانرود", "سنقر", "قصر شیرین", "گیلانغرب", "کرند غرب", "کل کل", "صحنه",
         "اسلام آباد غرب", "کوزران", "دالاهو", "هرسین",
         "روانسر", "خرم آباد", "پل دختر", "الیگودرز", "ازنا", "بروجرد", "دورود", "کوهدشت", "قم", "سلفچگان", "کهک", ]

    if not place in c:
        errors.append("شهرستان وارد شده در لیست شهرستان های ایران نیست یا ورودی به صورت اشتباه وارد شده است")

    # 7.بررسی آدرس
    address = data.get("address", None)
    if not len(address) <= 100:
        errors.append("طول آدرس بیشتر از حد مجاز (100 کاراکتر) است")

    # 8.بررسی کد پستی
    postal = data.get("postal", None)
    if len(postal) != 10 or not postal.isdigit():
        errors.append("کد پستی وارد شده معتبر نیست")

    # 9.بررسی تلفن همراه
    mobile = data.get("mobile", None)
    if len(mobile) != 11 or not mobile[2:].isdigit():
        errors.append("شماره تلفن همراه وارد شده معتبر نیست")
    if mobile[0:2] != "09":
        errors.append("شماره تلفن باید با 09 شروع شود")

    # 10.بررسی تلفن ثابت
    landline = data.get("landline", None)
    if landline:
        if landline.count('_') != 1:
            errors.append("شماره تلفن وارد شده باید دارای دو بخش پیش شماره و شماره ثابت باشد و با _ از هم جدا شوند")

        parts = landline.split('_')
        first = parts[0]
        second = parts[1]

        if len(first) != 3 or len(second) != 8:
            errors.append("پیش شماره باید سه رقمی و شماره تلفن ثابت باید هشت رقمی باشد")

        if not (first.isdigit() and second.isdigit()):
            errors.append("شماره تلفن باید به عدد وارد شود")

    # 11.بررسی دانشکده
    faculty = data.get("faculty", None)
    valid_faculty = {
        "فنی و مهندسی",
        "علوم پایه",
        "علوم انسانی",
        "دامپزشکی",
        "اقتصاد",
        "کشاورزی",
        "منابع طبیعی"
    }
    if not faculty in valid_faculty:
        errors.append("دانشکده معتبر نیست")

    # 12.بررسی رشته تحصیلی
    major = data.get("major", None)
    valid_majors = ["مهندسی کامپیوتر", "مهندسی برق(الکترونیک)", "مهندسی برق(قدرت)", "مهندسی مکانیک و پلیمر",
                    "مهندسی معدن",
                    "مهندسی عمران", "مهندسی شهرسازی"]

    if not major in valid_majors:
        errors.append("رشته تحصیلی معتبر نیست")

    # 13.بررسی وضعیت تاهل
    marital = data.get("marital", None)
    if not marital == "مجرد" or marital == "متاهل":
        errors.append("وضعیت تاهل معتبر نیست")

    # 14.بررسی درست بودن کد ملی
    id = data.get("id", None)

    if len(id) != 10 or not id.isdigit():
        return "کد ملی باید دقیقاً ۱۰ عدد باشد"

    check = int(id[9])
    sum = 0
    for i in range(9):
        sum += int(id[i]) * (10 - i)
    c = sum % 11

    if not (c < 2 and check == c or c >= 2 and check == 11 - c):
        errors.append("کد ملی معتبر نیست")


    if errors:
        return errors
    else:
        return f"همه موارد معتبر هستند"

